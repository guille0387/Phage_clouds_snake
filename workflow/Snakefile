import os

configfile: "config/config.yaml"

graph_output_dir = f'{config["dataset"]}_graph_files'
working_dir = os.getcwd()
query_file = config["input_fasta"]

if not os.path.exists(graph_output_dir):
    os.mkdir(graph_output_dir)

subworkflow graph_workflow:
    workdir:
        working_dir
    snakefile:
        f'{config["dataset"]}_graph.smk'

rule mash_dist:
    input:
        ref_sketch=graph_workflow(os.path.join(graph_output_dir, 'all_records_k15_s24000.msh')),
        query=query_file
    output:
        query_sketch=f'results/{os.path.splitext(query_file)[0]}_k15_s24000.msh',
        whole_sketch=f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_k15_s24000.msh',
        dist_file=f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_mash_dist_k15_s24000.tsv'
    threads: 10
    run:
        query_prefix = os.path.splitext(output.query_sketch)[0]
        comp_prefix = os.path.splitext(output.whole_sketch)[0]
        print(f'Creating sketch file for {query_file}...')
        shell(f'mash sketch -p 10 -i -k 15 -s 24000 -o {query_prefix} {input.query}')
        print('Done creating sketch file for query sequences')
        print('Creating compound sketch file...')
        shell(f'mash paste {comp_prefix} {input.ref_sketch} {output.query_sketch}')
        print('Done creating compound sketch file')
        print('Calculating mash distances between query sequences and compound sketch...')
        shell("mash dist -p 10 -i -v 1e-10 {output.whole_sketch} {input.query} > {output.dist_file}")
        print(f'Done creating {output}')

rule get_query_network:
    input:
        fasta=query_file,
        dist=f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_mash_dist_k15_s24000.tsv',
        ref_graph=graph_workflow(os.path.join(graph_output_dir, 'annotated_graph.nxpkl.gz'))
    output:
        f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_graph.nxpkl.gz'
    conda:
        "envs/phage_clouds.yaml"
    params:
        thres=config["threshold"],
        colour=config["colour_by_host"]
    script:
        "scripts/query_graph.py"

rule draw_query_network:
    input:
        f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_graph.nxpkl.gz'
    output:
        f'results/{config["dataset"]}_{os.path.splitext(query_file)[0]}_clouds.html'
    conda:
        "envs/phage_clouds.yaml"
    params:
        thres=config["threshold"],
        control=config["control_board"]
    script:
        "scripts/draw_query_graph.py"
